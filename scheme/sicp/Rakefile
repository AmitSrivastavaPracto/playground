require 'pathname'
ROOT = Pathname(File.dirname(__FILE__))

desc 'Scaffolds an exercise solution and its unit test'
task :exercise, :chapter, :exercise do |task, args|
  chapter  = args[:chapter].to_i
  exercise = args[:exercise].to_i

  raise ArgumentError, <<-END if chapter.zero? or exercise.zero?
You need to supply chapter and exercise numbers. If you want to generate exercise 2.23:

  rake exericse[2,23]
END

  solution_file = ROOT.join '%02d/%02d.scm' % [chapter, exercise]
  test_file     = ROOT.join '%02d/tests/%02d-tests.scm' % [chapter, exercise]
  exercise_name = '%1d.%02d' % [chapter, exercise]

  FileUtils.mkdir_p File.dirname(test_file)

  open(solution_file, 'w') { |f| f.write(<<-END) }
; SICP exercise #{exercise_name}
  END

  open(test_file, 'w') { |f| f.write(<<-END) }
(require rackunit rackunit/text-ui)
(load "../#{sprintf('%02d', exercise)}.scm")

(define sicp-#{exercise_name}-tests
  (test-suite
    "Tests for SICP exercise #{exercise_name}"

))

(run-tests sicp-#{exercise_name}-tests)
  END
end

namespace :run do
  desc 'Runs a specific exercise'
  task :exercise, :chapter, :exercise do |task, args|
    chapter  = args[:chapter].to_i
    exercise = args[:exercise].to_i

    raise ArgumentError, <<-END if chapter.zero? or exercise.zero?
You need to supply chapter and exercise numbers. If you want to run exercise 2.23:

  rake run:exericse[2,23]
END

    test_file     = ROOT.join '%02d/tests/%02d-tests.scm' % [chapter, exercise]
    exercise_name = '%1d.%02d' % [chapter, exercise]

    raise "Test for #{exercise_name} does not exist" unless File.exists? test_file

    FileUtils.cd File.dirname(test_file) do
      system "racket -r #{test_file}"
    end
  end

  desc 'Runs the tests of all exercises'
  task :all do
    FileUtils.cd ROOT do
      Dir.glob('0*').each do |chapter|
        Dir.glob("#{chapter}/tests/*").each do |test_file|
          test_file =~ %r{(\d)/tests/(\d+)-tests.scm}
          print "#{test_file}: "
          Rake::Task['run:exercise'].execute :chapter => $1, :exercise => $2
        end
      end
    end
  end
end

desc 'Runs watchr on the tests'
task :watch do
  exec 'watchr tests.watchr'
end
